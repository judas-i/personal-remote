Messaging

* EJB
 
** Consuming Service

 Consuming Service can be SessionBean.

+-----------------------------------------
package jp.co;

@Stateless
public class AnyService {

	public void serviceMethod(AnyParameter parameter ){
		//process
	}
}
+-----------------------------------------

** Message Driven Bean
 
+-----------------------------------------

@MessageDriven(	activationConfig = 
{
	@ActivationConfigProperty(propertyName="destinationType",propertyValue="javax.jms.Queue"),
	@ActivationConfigProperty(propertyName="destinationName",propertyValue="jms/queue/jp/co")	
}
public class DefaultQueue() extends DefaultMessageListenerImpl{
	
	//Needless to write code.
	
}
+----------------------------------------- 
+-----------------------------------------

@MessageDriven(	activationConfig = 
{
	@ActivationConfigProperty(propertyName="destinationType",propertyValue="javax.jms.Topic"),
	@ActivationConfigProperty(propertyName="destinationName",propertyValue="jms/topic/jp/co")	
}
public class DefaultTopic() extends DefaultMessageListenerImpl{
	
	//Needless to write code.
	
}
+----------------------------------------- 

** Client Code

 Default destination is 'jms/package name of service'.
 
 Developer can change the destination of each services by using 'DestinationNameResolver'

+-----------------------------------------
private MessagingClientFactory factory;

@Resource(name="javax/jms/QueueConnectionFactory")
private ConnectionFactory queueConnectionFactory;

@Resource(name="javax/jms/TopicConnectionFactory")
private ConnectionFactory topicConnectionFactory;


@PostConstruct
public void construct() {
	factory = ServiceLocator.createMessagingClientFactory();
}

public void serviceMethod() {
	
	MessagingProperty property = new MessagingProperty();
	
	//enqueue	
	property.setConnectionFactory(queueConnectionFactory);
	AnyService service = factory.createSender(AnyService.class,property);	
	service.serviceMethod(anyParameter);

	//publish 
	property.setConnectionFactory(topicConnectionFactory);
	AnyService serviceForTopic = factory.createPublisher(AnyService.class,property.setConnectionFactory);
	serviceForTopic(anyParameter);
	
}
+-----------------------------------------

* Spring Framework

** Consuming Service

 Consuming Service can be manabed Service

+-----------------------------------------
package jp.co;

@Service
public class AnyService {

	public void serviceMethod(AnyParameter parameter ){
		//process
	}
}
+-----------------------------------------

** Client Code

+-----------------------------------------
@Autowired
private MessagingClientFactory factory;

public void serviceMethod() {
	
	MessagingProperty property = new MessagingProperty();
	
	//enqueue	
	property.setDynamicDestinationName("jms/DefaultQueue");
	AnyService service = factory.createSender(AnyService.class,property);	
	service.serviceMethod(anyParameter);
	
	//publish 
	property.setDynamicDestinationName("jms/DefaultTopic");
	AnyService serviceForTopic = factory.createPublisher(AnyService.class,property);
	serviceForTopic(anyParameter);
	
}
+-----------------------------------------

** applicationContext.xml

 sample looking up JNDI of glasfish.

+-----------------------------------------

<bean id="jndiTemplate" class="org.springframework.jndi.JndiTemplate">
	<property name="environment">
    	<props>  	
        	<prop key="java.naming.factory.initial">
                 com.sun.enterprise.naming.SerialInitContextFactory
            </prop>
            <prop key="java.naming.factory.state">
                 com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl
            </prop>
            <prop key="java.naming.factory.url.pkgs">
                 com.sun.enterprise.naming
            </prop>
            <prop key="org.omg.CORBA.ORBInitialHost">
                 localhost
            </prop>
            <prop key="org.omg.CORBA.ORBInitialPort">
                 3700
            </prop>
        </props>
    </property>
</bean>

<!-- Connection Factory -->
<bean id="jmsQueueConnectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
    <property name="targetConnectionFactory">
        <bean id="internalJmsQueueConnectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean">
		      <property name="jndiTemplate" ref="jndiTemplate"/>
		      <property name="jndiName" value="javax/jms/DefaultQueueConnectionFactory"/>
	    </bean>
    </property>
</bean>
<bean id="jmsTopicConnectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
    <property name="targetConnectionFactory">
      	<bean id="internalJmsTopicConnectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean">
	        <property name="jndiTemplate" ref="jndiTemplate"/>
	        <property name="jndiName" value="javax/jms/DefaultTopicConnectionFactory"/>
	    </bean>
    </property>
</bean>

<!-- JMS Destination Resolver -->
<bean id="jmsDestinationResolver" class="org.springframework.jms.support.destination.JndiDestinationResolver">
    <property name="jndiTemplate" ref="jndiTemplate"/>
	<property name="cache" value="true"/>
</bean>
       
<!-- Messaging -->
<bean id="messageClientFactory" class="service.client.messaging.impl.MessageClientFactoryImpl">
    <!-- Queue -->
    <property name="queueProducer">
    	<bean id="queueProducer" class="service.client.messaging.MessageProducerImpl" scope="prototype">		
			<property name="jmsTemplate">
				<bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
			        <property name="connectionFactory" ref="jmsQueueConnectionFactory"/>
			        <property name="destinationResolver" ref="jmsDestinationResolver"/>
			        <property name="defaultDestination">
			        	 <bean id="defaultQueueDestination" class="org.springframework.jndi.JndiObjectFactoryBean">
					        <property name="jndiName" value="jms/DefaultQueue"/>
					    </bean>
			        </property>
			        <property name="receiveTimeout" value="20000"/>
			        <property name="sessionTransacted" value="true"/>
			    </bean>    
			</property>		
		</bean>    	
    	</property>
    	<!-- Topic -->
    	<property name="topicProducer">
    		<bean id="topicProducer" class="service.client.messaging.MessageProducerImpl" scope="prototype">
			<property name="jmsTemplate">					  
			    <bean id="jmsTopicTemplate" class="org.springframework.jms.core.JmsTemplate">
			        <property name="connectionFactory" ref="jmsTopicConnectionFactory"/>
			        <property name="destinationResolver" ref="jmsDestinationResolver"/>
			        <property name="pubSubNoLocal" value="true"/>            
			        <property name="defaultDestination">
			        	 <bean id="defaultTopicDestination" class="org.springframework.jndi.JndiObjectFactoryBean">
			        		<property name="jndiName" value="jms/DefaultTopic"/>
			    		</bean>
			        </property>
			        <property name="pubSubDomain" value="true"/>
			        <property name="receiveTimeout" value="20000"/>
			        <property name="sessionTransacted" value="true"/>
			    </bean>  
			</property>
		</bean>
    	</property>
    </bean>

<!-- Consuming -->
<bean id="messageListener" class="service.framework.core.messaging.DefaultMessageListenerImpl" />
<jms:listener-container 
	acknowledge="transacted"
	connection-factory="jmsQueueConnectionFactory"
	destination-type="queue"		
	destination-resolver="jmsDestinationResolver"
	transaction-manager="transactionManager">
	<jms:listener destination="jms/DefaultQueue"  ref="messageListener"/>
</jms:listener-container>
	
+-----------------------------------------

* Messaging Property

*-----+------+
<<Property>> | <<Description>> 
*-----+------+
JMSType | Specified JMSType
*-----+------+
JMSCorrelationID | Specified JMSCorrelationID
*-----+------+
ConnectionFactory | ConnectionFactory of JMS. On EJB this property is required.
*-----+------+
DynamicDestinationName | JNDI name of destination. 
*-----+------+
Property | Optional property of JMS. 
*-----+------+
