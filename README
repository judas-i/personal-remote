package main

import (
    "database/sql"
    _ "log"
    _ "github.com/go-sql-driver/mysql"
    "github.com/go-martini/martini"
    "github.com/codegangsta/martini-contrib/render"
    "github.com/martini-contrib/binding"
    "github.com/coopernurse/gorp"
    "io/ioutil"
    //"os"
    //"os/exec"
    "net/http"
    "fmt"
    "strconv"
    "time"
)

const (
    HTTP_HEADER_X_SITE_CD = "X-SITE-CD"
)

func main() {

    dbmap := initDb()

    siteMap := getSiteMap(dbmap)

    m := martini.Classic()
    m.Use(martini.Static("static"))
    m.Use(martini.Recovery())
    m.Use(render.Renderer())

    m.Get("/", func(r render.Render) {
        // TODO:ログイン処理、サイト選択画面等がまだ無いので固定でSiteCd"aaa"へリダイレクト。
        r.Redirect("/sites/aaa/deployments")
    })

    // Middlewares -------------------------------------------------

    // SiteCdパラメータの妥当性チェックを行うMiddleware
    var siteCdParamHandler = func(c martini.Context, params martini.Params, req *http.Request, r render.Render) {
        siteCd := params["siteCd"]
        site, found := siteMap[siteCd]
        if !found {
            r.Error(404)
            return
        }
        c.Map(site)
    }

    // SiteCdヘッダの妥当性チェックを行うMiddleware
    var siteCdHeaderHandler = func(c martini.Context, req *http.Request, r render.Render) {
        siteCd := req.Header.Get(HTTP_HEADER_X_SITE_CD)
        site, found := siteMap[siteCd]
        if !found {
            r.Error(400)
            return
        }
        c.Map(site)
    }


    // Routes for UI -----------------------------------------------

    // Site系画面用Route定義
    m.Group("/sites", func(r martini.Router) {
        // デプロイされたアーティファクト一覧(環境指定なし)
        r.Get("/:siteCd/deployments", func(site Site, r render.Render) {
            environments := getEnvironments(dbmap, site)
            if len(environments) == 0 {
               r.Error(404)
               return
            }
            path := fmt.Sprintf("/sites/%s/deployments/%s", site.SiteCd, environments[0].Name)
            r.Redirect(path, 302)
        })
        // デプロイされたアーティファクト一覧(環境指定あり)
        r.Get("/:siteCd/deployments/:environment", func(site Site, params martini.Params, r render.Render) {
            envName := params["environment"]
            environments := getEnvironments(dbmap, site)
            for _, elm := range environments {
                if elm.Name == envName {
                    r.HTML(200, "index", "")
                    return
                }
            }
            r.Error(404)
        })
        // デプロイされたアーティファクト情報(バージョン指定なし)
        // 最新バージョンを補完してリダイレクトします。
        r.Get("/:siteCd/deployments/:environment/:server/:place/:artifact", func(site Site, params martini.Params, r render.Render) {
            environment := params["environment"]
            server := params["server"]
            place := params["place"]
            artifact := params["artifact"]
            versions := getDeploymentVersions(dbmap, site, environment, server, place, artifact)
            if len(versions) == 0 {
                r.Error(404)
                return
            }
            latestVersion := versions[0]
            path := fmt.Sprintf("/sites/%s/deployments/%s/%s/%s/%s/%s", site.SiteCd, environment, server, place, artifact, latestVersion)
            r.Redirect(path, 302)
        })
        // デプロイされたアーティファクト情報(比較バージョン指定なし)
        r.Get("/:siteCd/deployments/:environment/:server/:place/:artifact/:version", func(site Site, params martini.Params, r render.Render) {
            var envName = params["environment"]
            var serverName = params["server"]
            var placeName = params["place"]
            var artifactName = params["artifact"]
            var version = params["version"]
            found, _ := getDeployment(dbmap, site, envName, serverName, placeName, artifactName, version)
            if !found {
                r.Error(404)
                return
            }
            r.HTML(200, "index", "")
        })
        // デプロイされたアーティファクト情報(比較バージョン指定あり)
        r.Get("/:siteCd/deployments/:environment/:server/:place/:artifact/:version/:compareVersion", func(site Site, params martini.Params, r render.Render) {
            var envName = params["environment"]
            var serverName = params["server"]
            var placeName = params["place"]
            var artifactName = params["artifact"]
            var version = params["version"]
            var compareVersion = params["compareVersion"]
            found, deployment := getDeployment(dbmap, site, envName, serverName, placeName, artifactName, version)
            if !found {
                r.Error(404)
                return
            }
            versions := getDeploymentOtherVersions(dbmap, deployment.Id, site, envName, serverName, placeName, artifactName)
            if !contains(versions, compareVersion) {
                r.Error(404)
                return
            }
            r.HTML(200, "index", "")
        })
        // ビルドされたアーティファクト一覧
        r.Get("/:siteCd/builds", func(site Site, r render.Render) {
            r.HTML(200, "index", "")
        })
    }, siteCdParamHandler)

    // Routes for API ----------------------------------------------

    // API用Route定義
    m.Group("/api", func(r martini.Router) {
        // 環境一覧取得API
        r.Get("/environments", func(site Site, r render.Render) {
            environments := getEnvironments(dbmap, site)
            r.JSON(200, environments)
        })
        // デプロイされたアーティファクト一覧取得API
        r.Get("/deployments/:environment", func(site Site, params martini.Params, r render.Render) {
            envName := params["environment"]
            deployments := getDeployments(dbmap, site, envName);
            if len(deployments) ==0 {
                r.Error(404)
            } else {
                r.JSON(200, deployments)
            }
        })
        // ビルドされたアーティファクト一覧取得API
        r.Get("/builds", func(site Site, r render.Render) {
            deployments := getBuildArtifactsLatest(dbmap, site);
            if len(deployments) ==0 {
                r.Error(404)
            } else {
                r.JSON(200, deployments)
            }
        })
        // デプロイされたアーティファクト詳細取得API
        r.Get("/deployments/:environment/:server/:place/:artifact/:version", func(site Site, params martini.Params, r render.Render) {
            var envName = params["environment"]
            var serverName = params["server"]
            var placeName = params["place"]
            var artifactName = params["artifact"]
            var version = params["version"]
            found, deployment := getDeployment(dbmap, site, envName, serverName, placeName, artifactName, version)
            if !found {
                r.Error(404);
                return
            }
            versions := getDeploymentOtherVersions(dbmap, deployment.Id, site, envName, serverName, placeName, artifactName)
            found, build := getBuild(dbmap, site, artifactName, version)
            if !found {
                r.Error(404);
                return
            }
            dependencies := getDependencies(dbmap, build.Id)
            artifact := &DeploymentArtifact{}
            artifact.Artifact = build.Artifact
            artifact.Version = build.Version
            artifact.ScmRevision = build.ScmRevision
            artifact.ScmBranch = build.ScmBranch
            artifact.ScmUrl = build.ScmUrl
            artifact.ScmWorkspace = build.ScmWorkspace
            artifact.OtherVersions = versions
            artifact.Dependencies = dependencies
            r.JSON(200, artifact)
        })
        // ビルドされたアーティファクト詳細取得API
        r.Get("/builds/:artifact/:version", func(site Site, params martini.Params, r render.Render) {
            var artifactName = params["artifact"]
            var version = params["version"]
            found, build := getBuild(dbmap, site, artifactName, version)
            if !found {
                r.Error(404);
                return
            }
            versions := getBuildOtherVersions(dbmap, build.Id, site, artifactName)
            dependencies := getDependencies(dbmap, build.Id)
            artifact := &DeploymentArtifact{}
            artifact.Artifact = build.Artifact
            artifact.Version = build.Version
            artifact.ScmRevision = build.ScmRevision
            artifact.ScmBranch = build.ScmBranch
            artifact.ScmUrl = build.ScmUrl
            artifact.ScmWorkspace = build.ScmWorkspace
            artifact.OtherVersions = versions
            artifact.Dependencies = dependencies
            r.JSON(200, artifact)
        })
        // gitコミットログ一覧取得API
        r.Get("/gitCommits/:artifact/:version/:compareVersion", func(site Site, params martini.Params, r render.Render) {
            artifact := params["artifact"]
            version := params["version"]
            compareVersion := params["compareVersion"]
            gitCommits := getGitCommits(dbmap, site, artifact, version, compareVersion)
            r.JSON(200, gitCommits)
        })
        // git変更ファイル一覧取得API
        r.Get("/gitChanges/:artifact/:version/:compareVersion", func(site Site, params martini.Params, r render.Render) {
            artifact := params["artifact"]
            version := params["version"]
            compareVersion := params["compareVersion"]
            gitChanges := getGitChanges(dbmap, site, artifact, version, compareVersion)
            r.JSON(200, gitChanges)
        })
        // デプロイ情報登録
        r.Post("/deployments", binding.Bind(DeploymentForm{}), func(site Site, form DeploymentForm, r render.Render) {
            releaseNo, _ := strconv.ParseInt(form.ReleaseNo, 10, 0)
            deployment := Deployment {
                SiteId: site.Id,
                Environment: form.Environment,
                ReleaseNo: int(releaseNo),
                Server: form.Server,
                Place: form.Place,
                Artifact: form.Artifact,
                Version: form.Version,
            }
            createDeployment(dbmap, deployment)
            r.JSON(200, nil)
        })
    }, siteCdHeaderHandler)
    m.Run()
}

// Models -----------------------------------------------------------

type Site struct {
    Id int 
    SiteCd string
}

type Environments struct {
    Environment []Environment
}

type Environment struct {
    Name        string `json:"name"`
    //LastUpdated string `json:"lastUpdated"`
    LastUpdated time.Time `json:"lastUpdated"`
}

type Deployment struct {
    Id          int `json:"id"`
    SiteId      int `json:"siteId"`
    Environment string `json:"environment"`
    ReleaseNo   int `json:"releaseNo"`
    Server      string `json:"server"`
    Place       string `json:"place"`
    Artifact    string `json:"artifact"`
    Version     string `json:"version"`
    //CreatedAt   string `json:"post"`
    CreatedAt   time.Time `json:"post"`
}

type Build struct {
    Id              int `json:"id"`
    SiteId          int `json:"siteId"`
    Artifact        string `json:"artifact"`
    Version         string `json:"version"`
    ScmRevision     string `json:"commitHash"`
    ScmUrl          string `json:"scmUrl"`
    ScmBranch       string `json:"scmBranch"`
    ScmWorkspace    string `json:"scmWorkspace"`
    //CreatedAt       string `json:"post"`
    CreatedAt       time.Time `json:"post"`
}

type Dependency struct {
    Artifact    string `json:"artifact"`
    Version     string `json:"version"`
}

type DeploymentArtifact struct {
    Artifact        string `json:"artifact"`
    Version         string `json:"version"`
    ScmRevision     string `json:"commitHash"`
    ScmUrl          string `json:"scmUrl"`
    ScmBranch       string `json:"scmBranch"`
    ScmWorkspace    string `json:"scmWorkspace"`
    Dependencies []Dependency`json:"dependencies"`
    OtherVersions []string `json:"otherVersions"`
}

type GitCommit struct {
    Revision    string `json:"revision"`
    Author      string `json:"author"`
    CommitAt    string `json:"commitAt"`
    Message     string `json:"message"`
}

type GitChange struct {
    File    string `json:"file"`
    Status  string `json:"status"`
}

type DeploymentForm struct {
    Environment string `json:"environment" binding:"required"`
    ReleaseNo   string `json:"releaseNo" binding:"required"`
    Server      string `json:"server" binding:"required"`
    Place       string `json:"place" binding:"required"`
    Artifact    string `json:"artifact" binding:"required"`
    Version     string `json:"version" binding:"required"`
}
func (form DeploymentForm) Validate(errors binding.Errors, req *http.Request) binding.Errors {
    errors = validateMaxSize(errors, "environment", form.Environment, 255)
    errors = validateInt(errors, "releaseNo", form.ReleaseNo)
    errors = validateMaxSize(errors, "server", form.Server, 255)
    errors = validateMaxSize(errors, "place", form.Place, 255)
    errors = validateMaxSize(errors, "artifact", form.Artifact, 255)
    errors = validateMaxSize(errors, "version", form.Version, 255)
    return errors
}

// Logics ---------------------------------------------------------

func getSiteMap(dbmap *gorp.DbMap) map[string]Site {
    var site []Site
    siteMap := make(map[string]Site)
    _, err := dbmap.Select(&site, readFile("sql/dml/select_site.sql"))
    checkError(err)
    for i:=0 ;i < len(site); i++ {
        siteMap[site[i].SiteCd] = site[i]
    }
    return siteMap
}

func getEnvironments(dbmap *gorp.DbMap, site Site) []Environment {
    var environment []Environment
    _, err := dbmap.Select(
        &environment,
        readFile("sql/dml/select_environments.sql"),
        map[string]interface{}{"siteId": site.Id})
    checkError(err)
    return environment
}

func getDeployments(dbmap *gorp.DbMap, site Site, envName string) []Deployment {
    var deployments []Deployment
    _, err := dbmap.Select(
        &deployments,
        readFile("sql/dml/select_deployments.sql"),
        map[string]interface{}{"siteId": site.Id, "environment": envName})
    checkError(err)
    return deployments
}

func getBuildArtifactsLatest(dbmap *gorp.DbMap, site Site) []Build {
    var builds []Build
    _, err := dbmap.Select(
        &builds,
        readFile("sql/dml/select_build_latest.sql"),
        map[string]interface{}{"siteId": site.Id})
    checkError(err)
    return builds
}


func getDeployment(dbmap *gorp.DbMap, site Site, envName string, server string, place string, artifact string, version string) (found bool, result Deployment) {
    var deployments []Deployment
    _, err := dbmap.Select(
        &deployments,
        readFile("sql/dml/select_deployment.sql"),
        map[string]interface{}{"siteId": site.Id, "environment": envName, "server": server, "place": place, "artifact": artifact, "version": version})
    checkError(err)
    if len(deployments) == 0 {
        return false, Deployment{}
    }
    return true, deployments[0]
}

func getDeploymentVersions(dbmap *gorp.DbMap, site Site, envName string, server string, place string, artifact string) []string {
    var versions []string
    _, err := dbmap.Select(
        &versions,
        readFile("sql/dml/select_deployment_versions.sql"),
        map[string]interface{}{"siteId": site.Id, "environment": envName, "server": server, "place": place, "artifact": artifact})
    checkError(err)
    return versions
}

func getDeploymentOtherVersions(dbmap *gorp.DbMap, excludedId int, site Site, envName string, server string, place string, artifact string) []string {
    var versions []string
    _, err := dbmap.Select(
        &versions,
        readFile("sql/dml/select_deployment_other_versions.sql"),
        map[string]interface{}{"excludedId": excludedId, "siteId": site.Id, "environment": envName, "server": server, "place": place, "artifact": artifact})
    checkError(err)
    return versions
}

func getBuildOtherVersions(dbmap *gorp.DbMap, excludedId int, site Site, artifact string) []string {
    var versions []string
    _, err := dbmap.Select(
        &versions,
        readFile("sql/dml/select_build_other_versions.sql"),
        map[string]interface{}{"excludedId": excludedId, "siteId": site.Id, "artifact": artifact})
    checkError(err)
    return versions
}

func getBuild(dbmap *gorp.DbMap, site Site, artifact string, version string) (found bool, result Build) {
    var builds []Build
    _, err := dbmap.Select(
        &builds,
        readFile("sql/dml/select_build.sql"),
        map[string]interface{}{"siteId": site.Id, "artifact": artifact, "version": version})
    checkError(err)
    if len(builds) == 0 {
        return false, Build{}
    }
    return true, builds[0]
}

func getDependencies(dbmap *gorp.DbMap, buildId int) []Dependency {
    var dependencies []Dependency
    _, err := dbmap.Select(
        &dependencies,
        readFile("sql/dml/select_dependencies.sql"),
        map[string]interface{}{"buildId": buildId})
    checkError(err)
    return dependencies
}
func getGitCommits(dbmap *gorp.DbMap, site Site, artifact string, version string, compareVersion string) []GitCommit {
    var gitCommits []GitCommit
    _, err := dbmap.Select(
        &gitCommits,
        readFile("sql/dml/select_git_commits.sql"),
        map[string]interface{}{"siteId": site.Id, "artifact": artifact, "version":version, "compareVersion":compareVersion})
    checkError(err)
    return gitCommits
}
func getGitChanges(dbmap *gorp.DbMap, site Site, artifact string, version string, compareVersion string) []GitChange {
    var gitChanges []GitChange
    _, err := dbmap.Select(
        &gitChanges,
        readFile("sql/dml/select_git_changes.sql"),
        map[string]interface{}{"siteId": site.Id, "artifact": artifact, "version":version, "compareVersion":compareVersion})
    checkError(err)
    return gitChanges
}

func createDeployment(dbmap *gorp.DbMap, deployment Deployment) {
    //deployment.CreatedAt = time.Now()
    //err := dbmap.Insert(&deployment)
    //checkError(err)
}

// Validations -----------------------------------------------------

func validateMaxSize(errors binding.Errors, name string, value string, max int) binding.Errors {
    if len(value) <= max {
        return errors
    }
    errors = append(errors, binding.Error{
        FieldNames:     []string{name},
        Classification: "MaxSizeError",
        Message:        "Maximum byte size exceeded.",
    })
    return errors
}

func validateInt(errors binding.Errors, name string, value string) binding.Errors {
    _, err := strconv.ParseInt(value, 10, 0)
    if err != nil {
        errors = append(errors, binding.Error{
            FieldNames:     []string{name},
            Classification: "NumericConversionError",
            Message:        "Cound not convert to numeric value.",
        })
    }
    return errors
}

// Utilities ------------------------------------------------------

func initDb() *gorp.DbMap {
    //TODO: 環境依存設定を切り出す
    db, err := sql.Open("mysql", "developer:dev@tcp(127.0.0.1:3306)/devdb?parseTime=true")
    checkError(err)
    dialect := gorp.MySQLDialect{"InnoDB", "UTF8"}
    dbmap := &gorp.DbMap{Db: db, Dialect: dialect}
    return dbmap;
}

func checkError(err error) {
    if err != nil {
        panic(err.Error())
    }
}

func readFile(path string) string {
    r, err := ioutil.ReadFile(path)
    checkError(err)
    return string(r)
}

func contains(strings []string, s string) bool {
    for _, e := range strings {
        if e == s {
            return true
        }
    }
    return false
}


